#summary tips

= Precision =
Most computers calculate floating point numbers in 'float' or 'double' as defined in [http://en.wikipedia.org/wiki/IEEE_754-2008 IEEE_754]. If your system use double, maximum geohash length is 21. Longer geohash is rounded when calculating in 'double'. With 'float', use 10 chars. Python use 'double' for the representation of float(), so you may set precision at most 21 chars.

{{{
>>> geohash.encode(35, 135, precision=21)
'xn0p0581b0bh2n0p0581b'
>>> geohash.encode(35, 135, precision=22)
'xn0p0581b0bh2n0p0581b0'
>>> geohash.encode(35, 135, precision=50)
'xn0p0581b0bh2n0p0581b00000000000000000000000000000'
}}}

This is off-topic but worth noting, when you display a floating number in decimal, use 17 digits for double representation. See also http://docs.python.org/tutorial/floatingpoint.html for detail.
{{{
>>> num=1.0/3.0
>>> print repr(num)
0.33333333333333331
>>> print "%.16e" % (num,)
3.3333333333333331e-001
}}}

= Nearby Location =
Suppose you have a geohash, and want to find nearby information. All you have to do is query a database with 9 neighboring geohashes. geohash.expand() is useful for this.

http://python-geohash.googlecode.com/svn/wiki/nearby.png

You can use this technique in jpgrid and jpiarea, too. jpgrid.expand() and jpiarea.expand() will return neighboring codes.

= Google App Engine =
When you have a geohash, you want to perform a query with string prefix match. 

The simplest way is described at http://code.google.com/appengine/docs/python/datastore/queriesandindexes.html#Introducing_Indexes . In case you use geohash, you can query like this:
{{{
querycode = 'ezs42'
db.GqlQuery("SELECT * FROM MyModel WHERE geohashcode >= :1 AND geohashcode < :2", querycode, querycode+"{")
}}}

This works fine because '{' (ascii code 123) is larger than 'z' (ascii code 122).

Another approach is ListStringProperty. In this case, you must extract all prefix hashcode when you store the geohash. When you query, you can use any length prefix.
{{{
m = MyModel()
m.geohashcodes = ['e', 'ez', 'ezs', 'ezs4', 'ezs42']
m.put()
db.GqlQuery("SELECT * FROM MyModel WHERE geohashcode = :1", "ezs4")
}}}